/* src/components/Hotbar/Hotbar.module.css */

/* --- 1. Hotbar Container Styling --- */
.hotbarContainer {
  position: fixed; /* Position relative to the viewport */
  bottom: 20px; /* Distance from the bottom of the screen */
  left: 50%; /* Center horizontally */
  transform: translateX(-50%); /* Adjust for true centering */
  display: flex; /* Arrange slots in a row */
  gap: 10px; /* Space between individual slots */
  padding: 15px 20px; /* Padding inside the hotbar container */
  background: var(--panel-bg);
  border: 2px solid var(--border-default);
  border-radius: 12px; /* Rounded corners for the container */
  box-shadow: 
    var(--shadow-lg),
    inset 0 0 30px rgba(0, 0, 0, 0.4),
    0 0 40px var(--color-crimson-glow);
  z-index: 1000; /* Ensure it stays on top of other content */
  user-select: none; /* Prevent text selection within the hotbar */
  overflow: hidden;
  backdrop-filter: blur(10px);
  position: relative;
  animation: slide-in-up var(--animation-duration-long) var(--animation-ease-out);
}

/* Elegant border gradient effect */
.hotbarContainer::before {
  content: '';
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: linear-gradient(45deg, 
    var(--color-crimson), 
    transparent 30%,
    transparent 70%,
    var(--color-crimson));
  border-radius: 12px;
  opacity: 0.2;
  z-index: -1;
  animation: borderGlow 6s ease-in-out infinite;
}

@keyframes borderGlow {
  0%, 100% { opacity: 0.2; }
  50% { opacity: 0.3; }
}

/* Inner corner accents */
.hotbarContainer::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-image: 
    linear-gradient(135deg, var(--color-crimson) 0%, transparent 20px),
    linear-gradient(225deg, var(--color-crimson) 0%, transparent 20px),
    linear-gradient(315deg, var(--color-crimson) 0%, transparent 20px),
    linear-gradient(45deg, var(--color-crimson) 0%, transparent 20px);
  background-position: 
    top left,
    top right,
    bottom right,
    bottom left;
  background-size: 20px 20px;
  background-repeat: no-repeat;
  opacity: 0.3;
  pointer-events: none;
  border-radius: 12px;
}

/* --- 2. Individual Slot Styling --- */
.hotbarSlot {
  position: relative; /* For positioning item icon, quantity, cooldown */
  width: 64px; /* Standard square slot size */
  height: 64px;
  background: linear-gradient(135deg, 
    var(--bg-tertiary) 0%, 
    var(--bg-secondary) 100%);
  border: 2px solid var(--border-default);
  border-radius: 8px; /* Slightly rounded corners for slots */
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: grab; /* Indicate draggable items */
  transition:
    transform var(--animation-duration-short) var(--animation-ease-out),
    box-shadow var(--animation-duration-short) var(--animation-ease-out),
    border-color var(--animation-duration-short) var(--animation-ease-out),
    background var(--animation-duration-short) var(--animation-ease-out);
  overflow: hidden; /* Crucial for cooldown overlay to clip */
  box-shadow: 
    inset 0 0 10px rgba(0, 0, 0, 0.3),
    0 2px 5px rgba(0, 0, 0, 0.4);
}

/* Hover Effect */
.hotbarSlot:hover {
  background: linear-gradient(135deg, 
    var(--bg-elevated) 0%, 
    var(--bg-tertiary) 100%);
  border-color: var(--color-crimson); /* Red accent for hotbar */
  box-shadow: 
    inset 0 0 15px rgba(0, 0, 0, 0.2),
    0 0 15px var(--color-crimson-glow);
  transform: scale(var(--scale-hover-slight)) translateY(-2px);
}

/* --- 3. Active/Pressed State Animations --- */
.hotbarSlot.active {
  background: linear-gradient(135deg, 
    rgba(255, 68, 102, 0.3) 0%, 
    rgba(255, 68, 102, 0.2) 100%);
  border-color: var(--color-crimson);
  box-shadow: 
    inset 0 0 20px var(--color-crimson-glow),
    0 0 20px var(--color-crimson-glow);
  transform: scale(var(--scale-hover-slight)); /* Slightly enlarge the active slot */
  animation: pulse 2s var(--animation-ease-in-out) infinite;
}

.hotbarSlot.pressed {
  transform: scale(var(--scale-active-slight)); /* Slightly shrink when pressed/clicked */
  box-shadow: inset 0 0 8px rgba(0, 0, 0, 0.5); /* Inset shadow for pressed look */
  background-color: var(--bg-elevated);
  border-color: var(--color-electric-blue-light);
}

/* --- 4. Drag and Drop Visual Feedback --- */
.hotbarSlot.dragging {
  opacity: 0.5; /* Make the original slot semi-transparent */
  border-style: dashed; /* Change border to dashed */
  border-color: var(--border-subtle); /* Indicate it's a placeholder */
}

.hotbarSlot.dragOver {
  border-color: var(--color-cyber-green); /* Green border for valid drop target */
  box-shadow: 0 0 12px var(--color-cyber-green-glow); /* Green glow for drop target */
  transform: scale(1.05); /* Enlarge the target slot */
}

/* --- 5. Item Icon and Quantity Badge Styling --- */
.itemIcon {
  width: 90%; /* Icon takes up most of the slot */
  height: 90%;
  object-fit: contain; /* Ensure image fits without distortion */
  pointer-events: none; /* Allows drag events to be registered on the parent slot */
  user-select: none; /* Prevent browser text selection */
  -webkit-user-drag: none; /* Prevent browser's default image drag */
}

.quantityBadge {
  position: absolute;
  bottom: 2px;
  right: 2px;
  background-color: rgba(0, 0, 0, 0.8);
  color: var(--text-primary);
  font-size: 0.75em;
  padding: 2px 5px;
  border-radius: 4px;
  min-width: 18px; /* Ensure badge is wide enough for single digits */
  text-align: center;
  line-height: 1; /* Compact line height */
  box-shadow: var(--shadow-sm); /* Small shadow for badge */
}

/* --- 6. Empty Slot Placeholder Styling --- */
.emptySlot {
  /* Inherits base styles from .hotbarSlot */
  background: linear-gradient(135deg, 
    var(--bg-tertiary) 0%, 
    var(--bg-secondary) 100%);
  border-style: dashed; /* Dashed border to signify emptiness */
  border-color: var(--border-subtle);
}

.emptySlot::before {
  content: ''; /* Create a pseudo-element for an inner placeholder */
  display: block;
  width: 30px;
  height: 30px;
  border: 1px dashed var(--border-subtle);
  border-radius: 4px;
  opacity: 0.3; /* Subtle appearance */
}

/* --- 7. Cooldown Overlay Effect --- */
.cooldownOverlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%; /* Full height when cooldown starts */
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--text-primary);
  font-size: 1.2em;
  font-weight: bold;
  pointer-events: none; /* Allow interaction with the slot underneath */
  opacity: 1; /* Fully opaque when active */
  /* Transition for height (fill-up) and opacity (fade out) */
  transition: height 0.3s ease-out, opacity 0.3s ease-out;
  transform-origin: bottom; /* Makes the fill animation start from the bottom */

  /* Example of how height would be controlled by JS based on cooldown percentage: */
  /* height: calc(100% * (cooldownRemaining / totalCooldown)); */
  /* opacity: (cooldownRemaining > 0 ? 1 : 0); */
}

/* --- 8. Responsive Design for Smaller Screens --- */
@media (max-width: 768px) {
  .hotbarContainer {
    bottom: 15px;
    padding: 10px 15px;
    gap: 8px;
  }

  .hotbarSlot {
    width: 56px; /* Slightly smaller slots */
    height: 56px;
    border-radius: 6px;
  }

  .quantityBadge {
    font-size: 0.7em;
    padding: 1px 4px;
    min-width: 16px;
  }

  .cooldownOverlay {
    font-size: 1em;
  }
}

@media (max-width: 480px) {
  .hotbarContainer {
    bottom: 10px;
    padding: 8px 10px;
    gap: 6px;
  }

  .hotbarSlot {
    width: 48px; /* Even smaller slots for very small screens */
    height: 48px;
    border-radius: 5px;
  }

  .quantityBadge {
    font-size: 0.65em;
    padding: 1px 3px;
    min-width: 14px;
  }

  .emptySlot::before {
    width: 24px;
    height: 24px;
  }
}

/* --- 9. Additional Missing Classes --- */

/* Context Menu Styling */
.contextMenu {
  position: fixed;
  background-color: var(--bg-secondary);
  border: 1px solid var(--border-default);
  border-radius: 4px;
  padding: 4px 0;
  box-shadow: var(--shadow-md);
  z-index: 1100;
  min-width: 100px;
}

.contextMenu button {
  width: 100%;
  padding: 8px 16px;
  background: none;
  border: none;
  color: var(--text-primary);
  text-align: left;
  cursor: pointer;
  font-size: 0.9em;
  transition: background-color 0.2s;
}

.contextMenu button:hover {
  background-color: var(--bg-elevated);
}

/* Cooldown Timer Text */
.cooldownTimer {
  font-size: 0.85em;
  font-weight: bold;
  color: var(--text-primary);
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
}

/* Empty Slot Content */
.emptySlotContent {
  width: 30px;
  height: 30px;
  border: 1px dashed var(--border-subtle);
  border-radius: 4px;
  opacity: 0.3;
}

/* Equipped Indicator */
.equippedIndicator {
  position: absolute;
  top: 2px;
  left: 2px;
  background-color: var(--color-cyber-green);
  color: var(--color-obsidian);
  font-size: 0.65em;
  padding: 2px 4px;
  border-radius: 3px;
  font-weight: bold;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  box-shadow: var(--shadow-sm);
}

/* Item Name (shows on hover) */
.itemName {
  position: absolute;
  bottom: -20px;
  left: 50%;
  transform: translateX(-50%);
  background-color: rgba(0, 0, 0, 0.9);
  color: var(--text-primary);
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.75em;
  white-space: nowrap;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.2s;
  z-index: 10;
}

.hotbarSlot:hover .itemName {
  opacity: 1;
}

/* Keybind Number */
.keybind {
  position: absolute;
  top: 2px;
  right: 2px;
  color: var(--color-crimson);
  font-size: 0.75em;
  font-weight: bold;
  text-shadow: 
    0 0 3px var(--color-crimson-glow),
    1px 1px 2px rgba(0, 0, 0, 0.8);
  opacity: 0.8;
}

/* On Cooldown State */
.hotbarSlot.onCooldown {
  cursor: not-allowed;
  opacity: 0.8;
}

.hotbarSlot.onCooldown:hover {
  transform: none;
  box-shadow: none;
}